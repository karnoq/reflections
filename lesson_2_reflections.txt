What happens when you initialize a repository? Why do you need to do it?

A message will appear indicating that an (empty) Git repository is created wherever the user has specified.
This creates a hidden file that will contain the meta-data that Git uses to track changes, etc.

How is the staging area different from the working directory and the repository? What value do you think it
offers?

The staging area is similar to a temporary directory where you can add or remove files before committing
them fully to the repository. This provides a benefit by allowing you to change your mind about which file(s)
to include into the repository at this time.

How can you use the staging area to make sure you have one commit per logical change?

You can use git diff to compare files between the working area and the staging area, and git diff --staged to compare files between the staging area and most recent commit. If it looks like more than one logical change has occurred than you can fix the issues so that is not the case.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to experiment with new features that might not be stable or have unintended consequnences, or try a different language format, or different layout, or completely new language, you could use a branch to work on those areas while not hindering or stopping work on the main branch.

How do the diagrams help you visualize the branch structure?

It's an easy way to see the master, any branches, and commits that are currently within your structure. It is also an easy way to see if there any commits that cannot be reached from other branches, i.e. should you create a new branch or just use that commit for experimental stuff and discard it?

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is that code from different branches is then added to whichever is chosen as the 'master' so that functions/additions/changes/experiments can now be accessible. Not too sure as to why it is represented that way though...

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic merging saves time in that it quickly combines the two files unless there is a conflict, in which case, you have to manually go in and figure out what to keep/change/remove.
Note: if you screw up on the merging of two branches use "git reset --hard HEAD~1" to get back to pre-merge.

